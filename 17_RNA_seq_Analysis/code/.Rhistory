sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
sampleNames <- c('ERR1797972', 'ERR1797973', 'ERR1797974', 'ERR1797969', 'ERR1797970', 'ERR1797971')
condition <- c('BH', 'BH', 'BH', 'Serum', 'Serum', 'Serum')
colData <- data.frame(row.names=colnames(sample_readcount_df), condition=factor(condition, levels=c('BH','Serum')))
View(colData)
bhi1 <- read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797972'))
bhi2 <- read.table("rna_mapping_BH_paired_ERR1797973.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797973'))
bhi3 <- read.table("rna_mapping_BH_paired_ERR1797974.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797974'))
srm1 <- read.table("rna_mapping_Serum_paired_ERR1797969.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797969'))
srm2 <- read.table("rna_mapping_Serum_paired_ERR1797970.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797970'))
srm3 <- read.table("rna_mapping_Serum_paired_ERR1797971.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797971'))
unmatched <- c("__no_feature","__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")
sample_readcount_df <- data.frame(bhi1, bhi2, bhi3, srm1, srm2, srm3)
sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
sampleNames <- c('ERR1797972', 'ERR1797973', 'ERR1797974', 'ERR1797969', 'ERR1797970', 'ERR1797971')
condition <- c('BH', 'BH', 'BH', 'Serum', 'Serum', 'Serum')
colData <- data.frame(row.names=colnames(sample_readcount_df), condition=factor(condition, levels=c('BH','Serum')))
View(colData)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~condition)
View(dataset)
dds <- DESeq(dataset)
View(dds)
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/RNA_seq_Analysis")
library(limma)
library(edgeR)
library(DESeq2)
library(Biobase)
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/Genome_Analysis_YiwenChen/16_RNA_ReadCount_htseq/result")
bhi1 <- read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797972'))
bhi2 <- read.table("rna_mapping_BH_paired_ERR1797973.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797973'))
bhi3 <- read.table("rna_mapping_BH_paired_ERR1797974.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797974'))
srm1 <- read.table("rna_mapping_Serum_paired_ERR1797969.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797969'))
srm2 <- read.table("rna_mapping_Serum_paired_ERR1797970.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797970'))
srm3 <- read.table("rna_mapping_Serum_paired_ERR1797971.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797971'))
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/RNA_seq_Analysis")
unmatched <- c("__no_feature","__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")
sample_readcount_df <- data.frame(bhi1, bhi2, bhi3, srm1, srm2, srm3)
sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
sampleNames <- c('ERR1797972', 'ERR1797973', 'ERR1797974', 'ERR1797969', 'ERR1797970', 'ERR1797971')
condition <- c('BH', 'BH', 'BH', 'Serum', 'Serum', 'Serum')
colData <- data.frame(row.names=colnames(sample_readcount_df), condition=factor(condition, levels=c('BH','Serum')))
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~condition)
dds <- DESeq(dataset)
result <- results(dds, contrast=c('condition','Serum','BH'))
significant_result <- result[ which(result$padj < 0.1 ), ]
summary(result)
plotMA(result, ylim = c(-1, 1) )
plotDispEsts(dds, ylim = c(1e-6, 1e1))
hist( result$pvalue, breaks=20, col="grey")
rlog_dds <- rlog(dds)
plotPCA(rlog_dds)
View(colData)
condition <- c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum')
condition <- factor(condition, levels=c('BH','Serum'))
condition
condition <- c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum')
condition <- factor(condition, levels=c('BHI','Serum'))
condition <- factor(condition, levels=c('BHI','Serum'))
condition
colData <- data.frame(row.names=colnames(sample_readcount_df), condition)
View(colData)
colData$condition
level(colData$condition)
levels(colData$condition)
condition <- factor(c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum'), levels=c('BHI','Serum'))
colData <- data.frame(row.names=colnames(sample_readcount_df), condition)
condition
levels(colData$condition)
sample_readcount_df
colnames(sample_readcount_df)
sample <- colnames(sample_readcount_df)
condition <- factor(c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum'), levels=c('BHI','Serum'))
colData <- data.frame(row.names=colnames(sample_readcount_df), condition)
View(colData)
colData <- data.frame(condition, row.names=sample)
View(colData)
View(colData)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~condition)
dds <- DESeq(dataset)
plot(dds)
dds
resultsNames(dds)
results(dds, name = "condition_Serum_vs_BHI")
lfcShrink(dds, coef = "condition_Serum_vs_BHI", type = "apeglm")
lfcShrink(dds, coef = "condition_Serum_vs_BHI")
BiocManager::install("apeglm")
BiocManager::install("apeglm")
lfcShrink(dds, coef = "condition_Serum_vs_BHI", type = "apeglm")
head(dataset)
head(dds)
head(res)
res <- results(dds, contrast=c('condition','Serum','BH'))
res <- results(dds, contrast=c('condition','Serum','BH'))
res <- results(dds, contrast=c('condition','Serum','BHI'))
res <- results(dds, contrast=c('condition','Serum','BH'))
res <- results(dds, contrast=c('condition','Serum','BHI'))
head(res)
res
results(dds)
assayNames(dataset)
data(dataset)
dim(dataset)
assay()
assay(dds)
colData(dds)
rowRanges(dds)
data(dataset)
data(sample_readcount_df)
data(sample_readcount_df)
sample_readcount_df <- data.frame(bhi1, bhi2, bhi3, srm1, srm2, srm3)
sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
data(sample_readcount_df)
assayNames(sample_readcount_df)
assayNames(colData)
assayNames(dds)
data(dds)
assay(dds)
View(srm1)
read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt")
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/Genome_Analysis_YiwenChen/16_RNA_ReadCount_htseq/result")
read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt")
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/RNA_seq_Analysis")
bhi1 <- read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797972'))
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/Genome_Analysis_YiwenChen/16_RNA_ReadCount_htseq/result")
bhi1 <- read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797972'))
bhi2 <- read.table("rna_mapping_BH_paired_ERR1797973.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797973'))
bhi3 <- read.table("rna_mapping_BH_paired_ERR1797974.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797974'))
srm1 <- read.table("rna_mapping_Serum_paired_ERR1797969.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797969'))
srm2 <- read.table("rna_mapping_Serum_paired_ERR1797970.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797970'))
srm3 <- read.table("rna_mapping_Serum_paired_ERR1797971.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797971'))
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/RNA_seq_Analysis")
unmatched <- c("__no_feature","__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")
sample_readcount_df <- data.frame(bhi1, bhi2, bhi3, srm1, srm2, srm3)
sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
sample <- colnames(sample_readcount_df)
condition <- factor(c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum'), levels=c('BHI','Serum'))
colData <- data.frame(condition, row.names=sample)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~condition)
dds <- DESeq(dataset)
assayNames(dds)
colSums(assay(dds))
head(assay(gse), 3)
head(assay(dds), 3)
assay(dds)
colData(dds)
rowRanges(dds)
assayNames(dds)
seqinfo(rowRanges(dds))
colData(dds)
dds$condition
dds$sizeFactor
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~ sample + condition)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~ sample + condition)
colData <- data.frame(sample, condition, row.names=sample)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~ sample + condition)
colData <- data.frame(condition, row.names=sample)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~ condition)
dds <- DESeq(dataset)
keep <- rowSums(counts(dds)) > 1
# 1. enter plotting stage. will go back to original data to do statistical analysis.
nrow(dds)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
nrow(dds)
# a little play around with DESeq dataset
head(assay(dds), 5)
seq(from = -1, to = 2, length = 1000)
10^seq(from = -1, to = 2, length = 1000)
rpois(1000*100, lambda)
lambda <- 10^seq(from = -1, to = 2, length = 1000)
rpois(1000*100, lambda)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)
BiocManager::install("vsn")
library("vsn")
meanSdPlot(cts, ranks = FALSE)
BiocManager::install("hexbin")
library("vsn")
meanSdPlot(cts, ranks = FALSE)
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)
# The VST is much faster to compute and is less sensitive to high count outliers than the rlog.
# The rlog tends to work well on small datasets (n < 30), potentially outperforming the VST when there is a wide
# range of sequencing depth across samples (an order of magnitude difference).
# We therefore recommend the VST for medium-to-large datasets (n > 30).
# You can perform both transformations and compare the meanSdPlot or PCA plots generated, as described below.
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
colData(rld)
meanSdPlot(rld)
library("dplyr")
library("ggplot2")
estimateSizeFactors(dds)
dds <- estimateSizeFactors(dds)
# a little play around with DESeq dataset
head(assay(dds), 5)
colSums(assay(dds))
colData(dds)
rowRanges(dds)
assayNames(dds)
?? as_data_frame
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>% mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
df <- bind_rows(
as_tibble(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>% mutate(transformation = "log2(x + 1)"),
as_tibble(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as_tibble(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
colnames(df)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
View(df)
View(df)
View(df)
assay(dds)
dist(t(assay(vsd)))
sampleDists <- dist(t(assay(vsd)))
# We visualize the distances in a heatmap in a figure below, using the function pheatmap from
# the pheatmap package.
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$dex, vsd$cell, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
data(vsd)
assayNames(vsd)
rowRanges(vsd)
colData(vsd)
rownames(colData(vsd))
rownames(vsd$condition)
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$condition, rownames(colData(vsd)), sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
sampleDists <- dist(t(assay(rld)))
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$condition, rownames(colData(rld)), sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
library("PoiClaClu")
BiocManager::install("PoiClaClu")
library("PoiClaClu")
poisd <- PoissonDistance(t(counts(dds)))
View(poisd)
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( dds$condition, rownames(colData(dds)), sep=" - " )
colnames(samplePoisDistMatrix) <- NULL
pheatmap(samplePoisDistMatrix,
clustering_distance_rows = poisd$dd,
clustering_distance_cols = poisd$dd,
col = colors)
plotPCA(vsd, intgroup = c("condition"))
colData(dds)
plotPCA(vsd, intgroup = c("condition", "sizeFactor"))
plotPCA(vsd, intgroup = c("condition"))
plotPCA(rld, intgroup = c("condition"))
mds <- as.data.frame(colData(vsd))  %>%
cbind(cmdscale(sampleDistMatrix))
ggplot(mds, aes(x = `1`, y = `2`, color = dex, shape = cell)) +
geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")
ggplot(mds, aes(x = `1`, y = `2`, color = condition, shape = cell)) +
geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")
ggplot(mds, aes(x = `1`, y = `2`, color = condition)) +
geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")
#--------------------------------------------------------------------------------------------------
#Differemtial expression analysis
dds <- DESeq(dds)
res <- results(dds)
res
mcols(res, use.names = TRUE)
summary(res)
res.05 <- results(dds, alpha = 0.05)
table(res.05$padj < 0.05)
res.05 <- results(dds, alpha = 0.95)
table(res.05$padj < 0.05)
res.05 <- results(dds, alpha = 0.15)
table(res.05$padj < 0.05)
table(res$padj < 0.05)
table(res.05$padj < 0.01)
summary(res)
res.05 <- results(dds, alpha = 0.05)
table(res.05$padj < 0.05)
table(res$padj <0.05)
resLFC1 <- results(dds, lfcThreshold=1)
table(resLFC1$padj < 0.1)
# LFC is denoting log2FoldChange, the effect size estimate. It tells us how much the gene’s expression
# seems to have changed due to treatment with dexamethasone in comparison to untreated samples.
# lfcSE is the standard error estimate for LFC
mcols(res, use.names = TRUE)
summary(res)
table(resLFC1$padj < 0.01)
# we test for genes that show significant effects of treatment on gene counts more than doubling or
# less than halving
resLFC1 <- results(dds, lfcThreshold=1)
table(resLFC1$padj < 0.1)
table(resLFC1$padj < 0.1)
# we test for genes that show significant effects of treatment on gene counts more than doubling or
# less than halving
resLFC1 <- results(dds, lfcThreshold=1)
#Multiple testing
sum(res$pvalue < 0.05, na.rm=TRUE)
count(res)
count(res$pvalue)
count(res$log2FoldChange)
nrow(res$baseMean)
sum(!is.na(res$pvalue))
res$pvalue
#Multiple testing
sum(res$pvalue < 0.05, na.rm=TRUE)
sum(!is.na(res$pvalue))
sum(res$padj < 0.1, na.rm=TRUE)
sum(res$padj < 0.05, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
head(resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ])
# we test for genes that show significant effects of treatment on gene counts more than doubling or
# less than halving
resLFC1 <- results(dds, lfcThreshold=1)
table(resLFC1$padj < 0.1)
topGene <- rownames(res)[which.min(res$padj)]
plotCounts(dds, gene = topGene, intgroup=c("condition"))
ggplot(geneCounts, aes(x = dex, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
# equivalent in ggplot2
library("ggbeeswarm")
install.packages("ggbeeswarm")
# equivalent in ggplot2
library("ggbeeswarm")
geneCounts <- plotCounts(dds, gene = topGene, intgroup = c("condition"),
returnData = TRUE)
ggplot(geneCounts, aes(x = dex, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = condition, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = condition, y = count, color = rownames(colData(rld)))) +
scale_y_log10() +  geom_beeswarm(cex = 3)
sample
ggplot(geneCounts, aes(x = condition, y = count, color = sample))) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = condition, y = count, color = sample)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
plotCounts(dds, gene = topGene, intgroup=c("dex"))
plotCounts(dds, gene = topGene, intgroup=c("condition"))
topGene
ggplot(geneCounts, aes(x = condition, y = count, color = sample)) +
scale_y_log10() +  geom_beeswarm(cex = 3) + ggtitle(topGene)
ggplot(geneCounts, aes(x = condition, y = count, color = sample)) +
scale_y_log10() +  geom_beeswarm(cex = 3) + ggtitle(topGene + "count")
ggplot(geneCounts, aes(x = condition, y = count, color = sample)) +
scale_y_log10() +  geom_beeswarm(cex = 3) + ggtitle(topGene)
#2. MA plot   ----distribution of the estimated coefficients in the model
library("apeglm")
resultsNames(dds)
res <- lfcShrink(dds, coef="condition_Serum_vs_BHI", type="apeglm")
plotMA(res, ylim = c(-5, 5))
res.noshr <- results(dds, name="condition_Serum_vs_BHI")
plotMA(res.noshr, ylim = c(-5, 5))
plotMA(res, ylim = c(-5, 5))
plotMA(res.noshr, ylim = c(-5, 5))
plotMA(res, ylim = c(-5, 5))
plotMA(res, ylim = c(-5,5))
topGene <- rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
rm(topGene)
plotMA(res, ylim = c(-5,5))
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
# 1. count plot for specific gene
topGene <- rownames(res)[which.min(res$padj)]
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
topGene <- rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
# 3. p-value plot
hist(res$pvalue[res$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("condition")])
pheatmap(mat, annotation_col = anno)
mat  <- assay(vsd)[ topVarGenes, ]
View(mat)
mat  <- mat - rowMeans(mat)
colData(vsd)
anno <- as.data.frame(colData(vsd)[, "condition"])
pheatmap(mat, annotation_col = anno)
colData(vsd)[, "condition"]
as.data.frame(colData(vsd)[, "condition"])
mat  <- assay(vsd)[ topVarGenes, ]
# 4. gene-clustering
library("genefilter")
topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 20)
mat  <- assay(rld)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(rld)[,c("condition")])
colnames(anno) <- "condition"
rownames(anno) <- colnames(mat)
pheatmap(mat, annotation_col = anno)
#BiocManager::install("DESeq2")
library(limma)
library(edgeR)
library(DESeq2)
library(apeglm)
library(Biobase)
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/Genome_Analysis_YiwenChen/16_RNA_ReadCount_htseq/result")
bhi1 <- read.table("rna_mapping_BH_paired_ERR1797972.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797972'))
bhi2 <- read.table("rna_mapping_BH_paired_ERR1797973.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797973'))
bhi3 <- read.table("rna_mapping_BH_paired_ERR1797974.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797974'))
srm1 <- read.table("rna_mapping_Serum_paired_ERR1797969.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797969'))
srm2 <- read.table("rna_mapping_Serum_paired_ERR1797970.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797970'))
srm3 <- read.table("rna_mapping_Serum_paired_ERR1797971.bam.readcount.txt", row.names = 1, col.names = c('gene', 'ERR1797971'))
setwd("/media/brandon/Windows/Users/brand/MyStudy/UU3st_2020/Genome_Analysis/Project/RNA_seq_Analysis")
unmatched <- c("__no_feature","__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")
sample_readcount_df <- data.frame(bhi1, bhi2, bhi3, srm1, srm2, srm3)
sample_readcount_df <- sample_readcount_df[! row.names(sample_readcount_df) %in% unmatched, ]
sample <- colnames(sample_readcount_df)
condition <- factor(c('BHI', 'BHI', 'BHI', 'Serum', 'Serum', 'Serum'), levels=c('BHI','Serum'))
colData <- data.frame(condition, row.names=sample)
dataset <- DESeqDataSetFromMatrix(countData = sample_readcount_df,
colData = colData,
design = ~ condition)
dds <- DESeq(dataset)
# a little play around with DESeq dataset
head(assay(dds), 5)
colSums(assay(dds))
colData(dds)
rowRanges(dds)
assayNames(dds)
# 1. enter plotting stage. will go back to original data to do statistical analysis.
nrow(dds)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
nrow(dds)
# a off-track example
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)
meanSdPlot(cts, ranks = FALSE)
# The VST is much faster to compute and is less sensitive to high count outliers than the rlog.
# The rlog tends to work well on small datasets (n < 30), potentially outperforming the VST when there is a wide
# range of sequencing depth across samples (an order of magnitude difference).
# We therefore recommend the VST for medium-to-large datasets (n > 30).
# You can perform both transformations and compare the meanSdPlot or PCA plots generated, as described below.
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
colData(rld)
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_tibble(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>% mutate(transformation = "log2(x + 1)"),
as_tibble(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as_tibble(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
colnames(df)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
